---
openapi: 3.0.2
info:
  title: CbrnAlert API
  description: "API for the preparing, running and getting the results of atmospheric dispersion models in case of CBRN-type incidents."
  contact:
    name: Tristan Carion
    email: tristan.carion@mil.be
  version: "1.0"
externalDocs:
  description: Find more info here
  url: /docs
servers:
- url: http://localhost:8000/api
  description: Dev Server
- url: https://cbrnalert.rma.ac.be/api
  description: Production server
paths:
  /login:
    post:
      tags:
      - Auth
      description: Authentication request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: Authentication succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /atp45/tree:
    get:
      tags:
      - Atp45
      description: Get the decision tree discriminating between the ATP-45 cases.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Atp45DecisionTree'
  /atp45/run:
    post:
      tags:
      - Atp45
      parameters:
      - name: weathertype
        in: query
        description: "Determine if the weather conditions are retrieved in archive forecasts (`archive`), in latest forecast (`forecast`) or are provided in the request (`manually`)"
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Atp45RunTypes'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Atp45Input'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Atp45Result'
  /forecast/available:
    get:
      tags:
      - Atp45
      description: Return the last forecast datetimes available at ECMWF
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForecastAvailableSteps'
  /flexpart/input:
    post:
      tags:
      - Flexpart
      description: Retrieve the meteorological data needed for flexpart
      parameters:
      - name: retrievalType
        in: query
        description: "If `simple`, use the simplified options structure defined by `FlexpartRetrieveSimple`. If `detailed`, a full Flexpart options object is expected (see Flexpart docs)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: simple
          enum:
          - simple
          - detailed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flexpart_input_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartInput'
        "500":
          description: The Flexpart input retrieval failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartInputError'
  /flexpart/inputs:
    get:
      tags:
      - Flexpart
      description: Return all the Flexpart inputs available (default finished)
      parameters:
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/RunStatus'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartInput'
  /flexpart/inputs/{inputId}:
    get:
      tags:
      - Flexpart
      parameters:
      - name: inputId
        in: path
        description: The input ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartInput'
    delete:
      tags:
      - Flexpart
      parameters:
      - name: inputId
        in: path
        description: The input ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartInput'
  /flexpart/run:
    post:
      tags:
      - Flexpart
      description: Run flexpart
      parameters:
      - name: runType
        in: query
        description: "If `simple`, use the simplified options structure defined by `FlexpartOptionsSimple`. If `detailed`, a full Flexpart options object is expected (see Flexpart docs)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: simple
          enum:
          - simple
          - detailed
      - name: inputId
        in: query
        description: Input id
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Options for Flexpart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flexpart_run_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRun'
        "500":
          description: The Flexpart run has failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRunError'
  /flexpart/runs:
    get:
      tags:
      - Flexpart
      description: Return all the Flexpart runs (default finished)
      parameters:
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/RunStatus'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartRun'
  /flexpart/runs/{runId}:
    get:
      tags:
      - Flexpart
      parameters:
      - name: runId
        in: path
        description: The flexpart run ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRun'
    delete:
      tags:
      - Flexpart
      parameters:
      - name: runId
        in: path
        description: The flexpart run ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartRun'
  /flexpart/runs/{runId}/outputs:
    get:
      tags:
      - Flexpart
      description: Return the outputs of the Flexpart run `runId`
      parameters:
      - name: runId
        in: path
        description: The flexpart run ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlexpartOutput'
  /flexpart/outputs/{outputId}:
    get:
      tags:
      - Flexpart
      parameters:
      - name: outputId
        in: path
        description: The output ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlexpartOutput'
  /flexpart/outputs/{outputId}/layers:
    get:
      tags:
      - Flexpart
      description: Return the layers of the Flexpart output `outputId`
      parameters:
      - name: outputId
        in: path
        description: The output ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: spatial
        in: query
        description: If only spatial layers must be retrieved
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /flexpart/outputs/{outputId}/dimensions:
    get:
      tags:
      - Flexpart
      description: Return the dimensions layers of the Flexpart output `outputId` with their values
      parameters:
      - name: outputId
        in: path
        description: The output ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: layer
        in: query
        description: "If the name of the layer is given, only returns the dimensions of the layer"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: horizontal
        in: query
        description: "If false, don't return the horizontal dimensions (lons and lats)"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /flexpart/outputs/{outputId}/slice:
    post:
      tags:
      - Flexpart
      description: Return a slice of the `output` according to some dimensions.
      parameters:
      - name: layer
        in: query
        description: Name of the layer to slice
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: geojson
        in: query
        description: "If true, the output is given in geojson format. The sliced layer must be a surface."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: legend
        in: query
        description: "If true, data for legend is provided"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: outputId
        in: path
        description: The output ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: dimensions to be sliced along
        content:
          application/json:
            schema:
              type: object
              example: {}
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
            image/tiff:
              schema:
                type: string
                format: binary
components:
  schemas:
    User:
      required:
      - email
      - username
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        name:
          type: string
    Atp45Category:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          example: chem
        description:
          type: string
        note:
          type: string
        longname:
          type: string
          example: Chemical Weapon
        paramtype:
          type: string
          example: category
        internalname:
          type: string
        content:
          type: array
          items:
            type: string
      description: Describe the ATP45 categories that will determine which case needs to be considered.
    Atp45DecisionTree:
      description: "A tree of `Atp45Category`, representing the decision sequence leading to the final ATP45 case."
      allOf:
      - $ref: '#/components/schemas/Atp45Category'
      - required:
        - children
        type: object
        properties:
          children:
            type: array
            items:
              $ref: '#/components/schemas/Atp45DecisionTree'
    Atp45Input:
      required:
      - categories
      - locations
      - weatherInput
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/Atp45Categories'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/GeoPoint'
        weatherInput:
          oneOf:
          - $ref: '#/components/schemas/Atp45WeatherManual'
          - $ref: '#/components/schemas/ForecastStep'
          - required:
            - archiveDate
            type: object
            properties:
              archiveDate:
                type: string
                format: date-time
      description: Information needed to run ATP45. It requires at least the list of id's for discriminating the decision tree and some release location(s).
    Atp45Categories:
      type: array
      description: "Array of ids, identifying the categories."
      example:
      - simplified
      - chem
      items:
        type: string
    Atp45WeatherManual:
      required:
      - stability
      - wind
      type: object
      properties:
        wind:
          $ref: '#/components/schemas/WindVelocity'
        stability:
          $ref: '#/components/schemas/Atp45WeatherManual_stability'
      description: "Weather conditions description for ATP45, in case it is provided by the user."
    Atp45StabilityClasses:
      type: string
      example: unstable
      enum:
      - unstable
      - neutral
      - stable
    Atp45RunTypes:
      type: string
      enum:
      - forecast
      - archive
      - manually
    WindVelocity:
      required:
      - azimuth
      - speed
      type: object
      properties:
        speed:
          type: number
          description: "Wind speed - units [m/s]"
          example: 5
        azimuth:
          type: number
          description: "angle from North - units [m/s]"
          example: 30
    GeoPoint:
      required:
      - lat
      - lon
      type: object
      properties:
        lon:
          type: number
          description: "Longitude [°]"
          example: 4
        lat:
          type: number
          description: "Latitude [°]"
          example: 50
    GeoRectangle:
      required:
      - bottom
      - left
      - right
      - top
      type: object
      properties:
        top:
          type: number
          description: "north lat [°]"
          example: 51
        bottom:
          type: number
          description: "south lat [°]"
          example: 49
        left:
          type: number
          description: "west lon [°]"
          example: 3
        right:
          type: number
          description: "east lon [°]"
          example: 5
    Atp45Result:
      required:
      - collection
      type: object
      properties:
        collection:
          allOf:
          - $ref: '#/components/schemas/FeatureCollection'
          - required:
            - features
            type: object
            properties:
              features:
                type: array
                items:
                  $ref: '#/components/schemas/Atp45Zone'
        metadata:
          type: object
    Atp45Zone:
      allOf:
      - $ref: '#/components/schemas/Feature'
      - required:
        - geometry
        - properties
        type: object
        properties:
          properties:
            $ref: '#/components/schemas/Atp45Zone_properties'
          geometry:
            allOf:
            - $ref: '#/components/schemas/Polygon'
    ForecastAvailableSteps:
      required:
      - leadtimes
      - start
      type: object
      properties:
        start:
          type: string
          format: date-time
        leadtimes:
          type: array
          items:
            type: string
            format: date-time
    ForecastStep:
      required:
      - leadtime
      - start
      type: object
      properties:
        start:
          type: string
          format: date-time
        leadtime:
          type: string
          format: date-time
    FlexpartRetrieveSimple:
      required:
      - area
      - end
      - gridres
      - start
      - timeStep
      type: object
      properties:
        area:
          $ref: '#/components/schemas/GeoRectangle'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        gridres:
          type: number
          description: "units: [°]"
          default: 1
        timeStep:
          type: number
          description: "units: [s]"
          default: 3600
      description: Simplified data structure needed for a retrieval of meteorological data for Flexpart
    FlexpartInput:
      required:
      - control
      - date_created
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/RunStatus'
        date_created:
          type: string
          format: date-time
        control:
          type: object
          additionalProperties:
            type: string
    FlexpartInputError:
      type: object
      properties:
        error:
          type: string
        info:
          type: string
        code:
          $ref: '#/components/schemas/WeatherRetrievalErrorCode'
    WeatherRetrievalErrorCode:
      type: string
      description: |-
        Application specific error code when a retrieval to MARS from ECMWF fails.
        Possible values area:
        - 'dataNotYetAvailable': The requested weather data are not available yet.
        - 'unknownMarsError': MARS error that couldn't be identified.
      enum:
      - dataNotYetAvailable
      - unknownMarsError
    FlexpartReleaseSimple:
      required:
      - end
      - height
      - location
      - mass
      - start
      type: object
      properties:
        location:
          $ref: '#/components/schemas/GeoPoint'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        height:
          type: number
          default: 50
        mass:
          type: number
          default: 1000
        particles:
          type: number
    FlexpartCommandSimple:
      required:
      - end
      - outputType
      - start
      - timeStep
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        timeStep:
          type: number
          description: "units: [s]"
          default: 3600
        specie:
          type: string
          default: AIRTRACER
        outputType:
          type: number
          description: Units for the output (see Flexpart docs)
          default: 1
    FlexpartOutgridSimple:
      required:
      - area
      - gridres
      - heights
      type: object
      properties:
        area:
          $ref: '#/components/schemas/GeoRectangle'
        gridres:
          type: number
          description: "units: [°]"
          default: 1
        heights:
          type: array
          items:
            type: number
            default: 100
    FlexpartOptionsSimple:
      required:
      - command
      - outgrid
      - releases
      type: object
      properties:
        releases:
          type: array
          items:
            $ref: '#/components/schemas/FlexpartReleaseSimple'
        command:
          $ref: '#/components/schemas/FlexpartCommandSimple'
        outgrid:
          $ref: '#/components/schemas/FlexpartOutgridSimple'
    FlexpartRun:
      required:
      - date_created
      - name
      - options
      - uuid
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/RunStatus'
        date_created:
          type: string
          format: date-time
        options:
          type: object
    FlexpartRunError:
      type: object
      properties:
        error:
          type: string
        info:
          type: string
        code:
          $ref: '#/components/schemas/FlexpartRunErrorCode'
      description: Error when a Flexpart run fails.
    FlexpartRunErrorCode:
      type: string
      description: |-
        Application specific error code when a Flexpart run fails.
        Possible values area:
        - 'noMeteoFieldsAvailable': The Flexpart run time window exceeds the available meteorological fields valid time.
        - 'unknownFlexpartRunError': Flexpart run error that couldn't be identified.
      enum:
      - noMeteoFieldsAvailable
      - unknownFlexpartRunError
    FlexpartOutput:
      required:
      - date_created
      - metadata
      - name
      - uuid
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        date_created:
          type: string
          format: date-time
        metadata:
          type: object
    RawSliceResponse:
      type: array
      items:
        type: number
    GeoJsonSliceResponse:
      required:
      - collection
      type: object
      properties:
        collection:
          allOf:
          - $ref: '#/components/schemas/FeatureCollection'
          - required:
            - features
            type: object
            properties:
              features:
                type: array
                items:
                  $ref: '#/components/schemas/GeoCell'
        metadata:
          oneOf:
          - $ref: '#/components/schemas/ColorbarData'
    ColorbarData:
      required:
      - ticks
      type: object
      properties:
        colors:
          type: array
          description: Colors for each interval in hex format
          example:
          - '#00007F'
          - '#0000FF'
          - '#7F0000'
          items:
            type: string
        ticks:
          type: array
          description: Values for the bounding intervals
          items:
            type: number
    GeoCell:
      required:
      - geometry
      - properties
      type: object
      allOf:
      - $ref: '#/components/schemas/Feature'
      - type: object
        properties:
          geometry:
            $ref: '#/components/schemas/Polygon'
          properties:
            $ref: '#/components/schemas/GeoCell_properties'
    RunStatus:
      type: string
      enum:
      - created
      - finished
      - ongoing
      - errored
    UnauthorizedError:
      required:
      - error
      type: object
      properties:
        error:
          type: string
        info:
          type: string
    FeatureCollection:
      description: GeoJSon 'FeatureCollection' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      allOf:
      - $ref: '#/components/schemas/GeoJsonObject'
      - required:
        - features
        type: object
        properties:
          features:
            type: array
            items:
              $ref: '#/components/schemas/Feature'
    GeoJsonObject:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - Feature
          - FeatureCollection
          - Point
          - MultiPoint
          - LineString
          - MultiLineString
          - Polygon
          - MultiPolygon
          - GeometryCollection
        bbox:
          type: array
          items:
            type: number
      description: |
        GeoJSon object
        The coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      discriminator:
        propertyName: type
    Feature:
      description: GeoJSon 'Feature' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      allOf:
      - $ref: '#/components/schemas/GeoJsonObject'
      - required:
        - geometry
        - properties
        type: object
        properties:
          geometry:
            allOf:
            - nullable: true
            - $ref: '#/components/schemas/Geometry'
          properties:
            type: object
            nullable: true
          id:
            oneOf:
            - type: number
            - type: string
    Geometry:
      description: |
        Abstract type for all GeoJSon object except Feature and FeatureCollection
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
      - $ref: '#/components/schemas/GeoJsonObject'
      - required:
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
        discriminator:
          propertyName: type
    Polygon:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      allOf:
      - $ref: '#/components/schemas/GeometryElement'
      - required:
        - coordinates
        type: object
        properties:
          coordinates:
            type: array
            items:
              $ref: '#/components/schemas/LinearRing'
    GeometryElement:
      description: |
        Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - required:
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
        discriminator:
          propertyName: type
    LinearRing:
      minItems: 4
      type: array
      description: |
        A linear ring is a closed LineString with four or more positions.
        The first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical.
        A linear ring is the boundary of a surface or the boundary of a hole in a surface.
        A linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      items:
        $ref: '#/components/schemas/Position'
    Position:
      maxItems: 3
      minItems: 2
      type: array
      description: |
        GeoJSon fundamental geometry construct.
        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
        Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as "M") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.1
      items:
        type: number
    login_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    inline_response_200:
      required:
      - idToken
      - user
      type: object
      properties:
        idToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: number
    flexpart_input_body:
      oneOf:
      - $ref: '#/components/schemas/FlexpartRetrieveSimple'
    flexpart_run_body:
      oneOf:
      - $ref: '#/components/schemas/FlexpartOptionsSimple'
    inline_response_200_1:
      oneOf:
      - $ref: '#/components/schemas/RawSliceResponse'
      - $ref: '#/components/schemas/GeoJsonSliceResponse'
    Atp45WeatherManual_stability:
      required:
      - stabilityClass
      type: object
      properties:
        stabilityClass:
          $ref: '#/components/schemas/Atp45StabilityClasses'
    Atp45Zone_properties:
      type: object
      properties:
        type:
          type: string
          example: release
        shape:
          type: string
          example: circle
    GeoCell_properties:
      required:
      - val
      type: object
      properties:
        val:
          type: number
  responses:
    UnauthorizedResponse:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
  parameters:
    inputIdParam:
      name: inputId
      in: path
      description: The input ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    runIdParam:
      name: runId
      in: path
      description: The flexpart run ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    outputIdParam:
      name: outputId
      in: path
      description: The output ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
