# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function atp45_run_post_read(handler)
    function atp45_run_post_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["weathertype"] = OpenAPI.Servers.to_param(Atp45RunTypes, query_params, "weathertype", required=true, )
        openapi_params["Atp45Input"] = OpenAPI.Servers.to_param_type(Atp45Input, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function atp45_run_post_validate(handler)
    function atp45_run_post_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function atp45_run_post_invoke(impl; post_invoke=nothing)
    function atp45_run_post_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.atp45_run_post(req::HTTP.Request, openapi_params["weathertype"], openapi_params["Atp45Input"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function atp45_tree_get_read(handler)
    function atp45_tree_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function atp45_tree_get_validate(handler)
    function atp45_tree_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function atp45_tree_get_invoke(impl; post_invoke=nothing)
    function atp45_tree_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.atp45_tree_get(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function forecast_available_get_read(handler)
    function forecast_available_get_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function forecast_available_get_validate(handler)
    function forecast_available_get_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function forecast_available_get_invoke(impl; post_invoke=nothing)
    function forecast_available_get_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.forecast_available_get(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerAtp45Api(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/atp45/run", OpenAPI.Servers.middleware(impl, atp45_run_post_read, atp45_run_post_validate, atp45_run_post_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/atp45/tree", OpenAPI.Servers.middleware(impl, atp45_tree_get_read, atp45_tree_get_validate, atp45_tree_get_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/forecast/available", OpenAPI.Servers.middleware(impl, forecast_available_get_read, forecast_available_get_validate, forecast_available_get_invoke; optional_middlewares...))
    return router
end
