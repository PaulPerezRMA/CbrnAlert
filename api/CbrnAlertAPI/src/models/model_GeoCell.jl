# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    GeoCell(;
        type=nothing,
        bbox=nothing,
        geometry=nothing,
        properties=nothing,
        id=nothing,
    )

    - type::String
    - bbox::Vector{Float64}
    - geometry::Polygon
    - properties::GeoCellAllOfProperties
    - id::OneOfnumberstring
"""
Base.@kwdef mutable struct GeoCell <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    bbox::Union{Nothing, Vector{Float64}} = nothing
    geometry = nothing # spec type: Union{ Nothing, Polygon }
    properties = nothing # spec type: Union{ Nothing, GeoCellAllOfProperties }
    id = nothing # spec type: Union{ Nothing, OneOfnumberstring }

    function GeoCell(type, bbox, geometry, properties, id, )
        OpenAPI.validate_property(GeoCell, Symbol("type"), type)
        OpenAPI.validate_property(GeoCell, Symbol("bbox"), bbox)
        OpenAPI.validate_property(GeoCell, Symbol("geometry"), geometry)
        OpenAPI.validate_property(GeoCell, Symbol("properties"), properties)
        OpenAPI.validate_property(GeoCell, Symbol("id"), id)
        return new(type, bbox, geometry, properties, id, )
    end
end # type GeoCell

const _property_types_GeoCell = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("bbox")=>"Vector{Float64}", Symbol("geometry")=>"Polygon", Symbol("properties")=>"GeoCellAllOfProperties", Symbol("id")=>"OneOfnumberstring", )
OpenAPI.property_type(::Type{ GeoCell }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoCell[name]))}

function check_required(o::GeoCell)
    o.type === nothing && (return false)
    o.geometry === nothing && (return false)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoCell }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeoCell", :enum, val, ["Feature", "FeatureCollection", "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection"])
    end
end
