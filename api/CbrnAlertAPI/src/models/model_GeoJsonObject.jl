# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoJSon object The coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level. 

    GeoJsonObject(;
        type=nothing,
        bbox=nothing,
    )

    - type::String
    - bbox::Vector{Float64}
"""
Base.@kwdef mutable struct GeoJsonObject <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    bbox::Union{Nothing, Vector{Float64}} = nothing

    function GeoJsonObject(type, bbox, )
        OpenAPI.validate_property(GeoJsonObject, Symbol("type"), type)
        OpenAPI.validate_property(GeoJsonObject, Symbol("bbox"), bbox)
        return new(type, bbox, )
    end
end # type GeoJsonObject

const _property_types_GeoJsonObject = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("bbox")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ GeoJsonObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoJsonObject[name]))}

function check_required(o::GeoJsonObject)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoJsonObject }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeoJsonObject", :enum, val, ["Feature", "FeatureCollection", "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection"])
    end
end
