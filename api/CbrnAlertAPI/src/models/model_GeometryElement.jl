# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Abstract type for all GeoJSon &#39;Geometry&#39; object the type of which is not &#39;GeometryCollection&#39; 

    GeometryElement(;
        type=nothing,
        bbox=nothing,
    )

    - type::String
    - bbox::Vector{Float64}
"""
Base.@kwdef mutable struct GeometryElement <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    bbox::Union{Nothing, Vector{Float64}} = nothing

    function GeometryElement(type, bbox, )
        OpenAPI.validate_property(GeometryElement, Symbol("type"), type)
        OpenAPI.validate_property(GeometryElement, Symbol("bbox"), bbox)
        return new(type, bbox, )
    end
end # type GeometryElement

const _property_types_GeometryElement = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("bbox")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ GeometryElement }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeometryElement[name]))}

function check_required(o::GeometryElement)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeometryElement }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeometryElement", :enum, val, ["Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon"])
    end
end
