# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    FeatureAllOf(;
        geometry=nothing,
        properties=nothing,
        id=nothing,
    )

    - geometry::Any
    - properties::Any
    - id::OneOfnumberstring
"""
Base.@kwdef mutable struct FeatureAllOf <: OpenAPI.APIModel
    geometry::Union{Nothing, Any} = nothing
    properties::Union{Nothing, Any} = nothing
    id = nothing # spec type: Union{ Nothing, OneOfnumberstring }

    function FeatureAllOf(geometry, properties, id, )
        OpenAPI.validate_property(FeatureAllOf, Symbol("geometry"), geometry)
        OpenAPI.validate_property(FeatureAllOf, Symbol("properties"), properties)
        OpenAPI.validate_property(FeatureAllOf, Symbol("id"), id)
        return new(geometry, properties, id, )
    end
end # type FeatureAllOf

const _property_types_FeatureAllOf = Dict{Symbol,String}(Symbol("geometry")=>"Any", Symbol("properties")=>"Any", Symbol("id")=>"OneOfnumberstring", )
OpenAPI.property_type(::Type{ FeatureAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeatureAllOf[name]))}

function check_required(o::FeatureAllOf)
    o.geometry === nothing && (return false)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FeatureAllOf }, name::Symbol, val)
end
