# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Information needed to run ATP45. It requires at least the list of id&#39;s for discriminating the decision tree and some release location(s).

    Atp45Input(;
        categories=nothing,
        locations=nothing,
        weatherInput=nothing,
    )

    - categories::Vector{String} : Array of ids, identifying the categories.
    - locations::Vector{GeoPoint}
    - weatherInput::Atp45InputWeatherInput
"""
Base.@kwdef mutable struct Atp45Input <: OpenAPI.APIModel
    categories::Union{Nothing, Vector{String}} = nothing
    locations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GeoPoint} }
    weatherInput = nothing # spec type: Union{ Nothing, Atp45InputWeatherInput }

    function Atp45Input(categories, locations, weatherInput, )
        OpenAPI.validate_property(Atp45Input, Symbol("categories"), categories)
        OpenAPI.validate_property(Atp45Input, Symbol("locations"), locations)
        OpenAPI.validate_property(Atp45Input, Symbol("weatherInput"), weatherInput)
        return new(categories, locations, weatherInput, )
    end
end # type Atp45Input

const _property_types_Atp45Input = Dict{Symbol,String}(Symbol("categories")=>"Vector{String}", Symbol("locations")=>"Vector{GeoPoint}", Symbol("weatherInput")=>"Atp45InputWeatherInput", )
OpenAPI.property_type(::Type{ Atp45Input }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Atp45Input[name]))}

function check_required(o::Atp45Input)
    o.categories === nothing && (return false)
    o.locations === nothing && (return false)
    o.weatherInput === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Atp45Input }, name::Symbol, val)
end
