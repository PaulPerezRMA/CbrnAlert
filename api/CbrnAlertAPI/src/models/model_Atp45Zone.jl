# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    Atp45Zone(;
        type=nothing,
        bbox=nothing,
        geometry=nothing,
        properties=nothing,
        id=nothing,
    )

    - type::String
    - bbox::Vector{Float64}
    - geometry::Polygon
    - properties::Atp45ZoneAllOfProperties
    - id::OneOfnumberstring
"""
Base.@kwdef mutable struct Atp45Zone <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    bbox::Union{Nothing, Vector{Float64}} = nothing
    geometry = nothing # spec type: Union{ Nothing, Polygon }
    properties = nothing # spec type: Union{ Nothing, Atp45ZoneAllOfProperties }
    id = nothing # spec type: Union{ Nothing, OneOfnumberstring }

    function Atp45Zone(type, bbox, geometry, properties, id, )
        OpenAPI.validate_property(Atp45Zone, Symbol("type"), type)
        OpenAPI.validate_property(Atp45Zone, Symbol("bbox"), bbox)
        OpenAPI.validate_property(Atp45Zone, Symbol("geometry"), geometry)
        OpenAPI.validate_property(Atp45Zone, Symbol("properties"), properties)
        OpenAPI.validate_property(Atp45Zone, Symbol("id"), id)
        return new(type, bbox, geometry, properties, id, )
    end
end # type Atp45Zone

const _property_types_Atp45Zone = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("bbox")=>"Vector{Float64}", Symbol("geometry")=>"Polygon", Symbol("properties")=>"Atp45ZoneAllOfProperties", Symbol("id")=>"OneOfnumberstring", )
OpenAPI.property_type(::Type{ Atp45Zone }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Atp45Zone[name]))}

function check_required(o::Atp45Zone)
    o.type === nothing && (return false)
    o.geometry === nothing && (return false)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Atp45Zone }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Atp45Zone", :enum, val, ["Feature", "FeatureCollection", "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection"])
    end
end
