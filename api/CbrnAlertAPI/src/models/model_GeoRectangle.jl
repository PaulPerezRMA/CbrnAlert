# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    GeoRectangle(;
        top=nothing,
        bottom=nothing,
        left=nothing,
        right=nothing,
    )

    - top::Float64 : north lat [째]
    - bottom::Float64 : south lat [째]
    - left::Float64 : west lon [째]
    - right::Float64 : east lon [째]
"""
Base.@kwdef mutable struct GeoRectangle <: OpenAPI.APIModel
    top::Union{Nothing, Float64} = nothing
    bottom::Union{Nothing, Float64} = nothing
    left::Union{Nothing, Float64} = nothing
    right::Union{Nothing, Float64} = nothing

    function GeoRectangle(top, bottom, left, right, )
        OpenAPI.validate_property(GeoRectangle, Symbol("top"), top)
        OpenAPI.validate_property(GeoRectangle, Symbol("bottom"), bottom)
        OpenAPI.validate_property(GeoRectangle, Symbol("left"), left)
        OpenAPI.validate_property(GeoRectangle, Symbol("right"), right)
        return new(top, bottom, left, right, )
    end
end # type GeoRectangle

const _property_types_GeoRectangle = Dict{Symbol,String}(Symbol("top")=>"Float64", Symbol("bottom")=>"Float64", Symbol("left")=>"Float64", Symbol("right")=>"Float64", )
OpenAPI.property_type(::Type{ GeoRectangle }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoRectangle[name]))}

function check_required(o::GeoRectangle)
    o.top === nothing && (return false)
    o.bottom === nothing && (return false)
    o.left === nothing && (return false)
    o.right === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoRectangle }, name::Symbol, val)
end
