# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    FlexpartOptionsSimple(;
        releases=nothing,
        command=nothing,
        outgrid=nothing,
    )

    - releases::Vector{FlexpartReleaseSimple}
    - command::FlexpartCommandSimple
    - outgrid::FlexpartOutgridSimple
"""
Base.@kwdef mutable struct FlexpartOptionsSimple <: OpenAPI.APIModel
    releases::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FlexpartReleaseSimple} }
    command = nothing # spec type: Union{ Nothing, FlexpartCommandSimple }
    outgrid = nothing # spec type: Union{ Nothing, FlexpartOutgridSimple }

    function FlexpartOptionsSimple(releases, command, outgrid, )
        OpenAPI.validate_property(FlexpartOptionsSimple, Symbol("releases"), releases)
        OpenAPI.validate_property(FlexpartOptionsSimple, Symbol("command"), command)
        OpenAPI.validate_property(FlexpartOptionsSimple, Symbol("outgrid"), outgrid)
        return new(releases, command, outgrid, )
    end
end # type FlexpartOptionsSimple

const _property_types_FlexpartOptionsSimple = Dict{Symbol,String}(Symbol("releases")=>"Vector{FlexpartReleaseSimple}", Symbol("command")=>"FlexpartCommandSimple", Symbol("outgrid")=>"FlexpartOutgridSimple", )
OpenAPI.property_type(::Type{ FlexpartOptionsSimple }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FlexpartOptionsSimple[name]))}

function check_required(o::FlexpartOptionsSimple)
    o.releases === nothing && (return false)
    o.command === nothing && (return false)
    o.outgrid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FlexpartOptionsSimple }, name::Symbol, val)
end
