# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    LoginPost200Response(;
        idToken=nothing,
        user=nothing,
        expiresIn=nothing,
    )

    - idToken::String
    - user::User
    - expiresIn::Float64
"""
Base.@kwdef mutable struct LoginPost200Response <: OpenAPI.APIModel
    idToken::Union{Nothing, String} = nothing
    user = nothing # spec type: Union{ Nothing, User }
    expiresIn::Union{Nothing, Float64} = nothing

    function LoginPost200Response(idToken, user, expiresIn, )
        OpenAPI.validate_property(LoginPost200Response, Symbol("idToken"), idToken)
        OpenAPI.validate_property(LoginPost200Response, Symbol("user"), user)
        OpenAPI.validate_property(LoginPost200Response, Symbol("expiresIn"), expiresIn)
        return new(idToken, user, expiresIn, )
    end
end # type LoginPost200Response

const _property_types_LoginPost200Response = Dict{Symbol,String}(Symbol("idToken")=>"String", Symbol("user")=>"User", Symbol("expiresIn")=>"Float64", )
OpenAPI.property_type(::Type{ LoginPost200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LoginPost200Response[name]))}

function check_required(o::LoginPost200Response)
    o.idToken === nothing && (return false)
    o.user === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ LoginPost200Response }, name::Symbol, val)
end
